{"componentChunkName":"component---src-templates-blog-post-js","path":"/hoisting-in-javascript/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hoisting in JavaScript\",\n  \"date\": \"2021-05-18\",\n  \"tags\": [\"javascript\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In JS, hoisting allows function, variables and classes be referenced before declared.\"), mdx(\"p\", null, \"for example,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"myName(\\\"Amy\\\");\\n\\nfunction myName(name) {\\n  console.log(\\\"My name is \\\" + name);\\n}\\n\\n// My name is Amy\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Declaration & Initialization\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hoisting of  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" declaration is be hoisted, but  initialization isn't !\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The initial value of var is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" .\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"see the example from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\n  }, \"mdn\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"console.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\\nvar num; // Declaration\\nnum = 6; // Initialization\\nconsole.log(num); // Returns 6 after the line with initialization is executed.\\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"console.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\\nvar num = 6; // Initialization and declaration.\\nconsole.log(num); // Returns 6 after the line with initialization is executed. \\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"console.log(num); // Throws ReferenceError exception - the interpreter doesn't know about `num`.\\nnum = 6; // Initialization\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If we doesn't declare \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"num\"), \" , it won't be hoisted.\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hoisting of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There is hoisting action in let and const variable.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Unlike var, there's no default value of let and const hoisting.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"console.log(a) // ReferenceError: Cannot access 'a' before initialization                                                                    \\nlet a = 10\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\"\n  }, \"Temporal dead zone (TDZ)\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The TDZ start at the beginning of the scope.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The TDZ end at the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" variable is fully initialized.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example 1\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// (O)\\n// TDZ starts at beginning of scope\\nconst func = () => console.log(letVar); // OK\\n\\nlet letVar = 3; // End of TDZ (for letVar)\\nfunc(); // Called outside TDZ!\\n\\n// returns 3\\n\")), \"  the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"func\"), \" is called in TDZ \", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// (X) Exception !!!\\n// TDZ starts at beginning of scope\\nconst func = () => console.log(letVar); // OK\\n\\n// Within the TDZ letVar access throws `ReferenceError`\\nfunc(); // <--------- the function is called in TDZ \\nlet letVar = 3; // End of TDZ (for letVar)\\n\\n// Cannot access 'letVar' before initialization\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example 2\", \"  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"foo\"), \" is be called in TDZ\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// (X) Exception !!! \\n// TDZ starts at beginning of scope\\n  console.log(bar); // undefined\\n  console.log(foo); // ReferenceError\\n  var bar = 1;\\n  let foo = 2; // End of TDZ (for foo)\\n\\n// Cannot access 'foo' before initialization\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"example 3\", \"  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\"), \" is be hoist in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"test\"), \" function scope\", \"  (is be called in TDZ)\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// (X) Exception !!! \\n\\nvar a = 10\\nfunction test(){\\n  console.log(a)\\n  let a\\n}\\ntest()\\n\\n// Cannot access 'a' before initialization\\n\")))))))))), mdx(\"h3\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\n  }, \"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.techbridge.cc/2018/11/10/javascript-hoisting/\"\n  }, \"https://blog.techbridge.cc/2018/11/10/javascript-hoisting/\"), \" (can see the info about JS \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"interpreter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"compiler\"), \" down bellow the article)\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Hoisting in JavaScript","date":"2021-05-18","tags":["javascript"]}}},"pageContext":{"slug":"/hoisting-in-javascript/"}},"staticQueryHashes":["608244144"]}